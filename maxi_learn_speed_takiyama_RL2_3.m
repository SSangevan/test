function [outputArray, tTarget, Z] = maxi_learn_speed_takiyama_RL2_3()
% Reinforcement learning for force production of a two joint planar arm
% theta: direction of desired force (degrees)

clear all;
%close all;
clc;

% Input layer:
T = 1; %number of trial
K = 10; %number of position of theta in the circle (real number is K+1)
thetak = (2*pi)/K:(2*pi)/K:2*pi;
randomOrder = randi(K,T);
mOutput = 2; %number of outputs
nInput = 5; %number of neurons
phiInput = 30; % angle of perturbation

nTrials = 10000;
phi = zeros(1,nInput);


% Connectivity (weight) matrix (W)
Z=zeros(mOutput, nInput);
%E=zeros(1,nTrials); %Faux, car E un reel
W1 = rand(nInput, mOutput);

V1 = rand(nInput, mOutput);

Wthres1 = zeros(nInput,1);
Vthres1= zeros(nInput,1);
expectR1= zeros(nInput,1);
O1= zeros(nInput,1);
A1= zeros(nInput,1);
y= zeros(nInput,1);
omega1= zeros(nInput,1);


deltaW1= zeros(nInput,1);
deltaV1= zeros(nInput,1);
%R = [cos(phiInput),-sin(phiInput);sin(phiInput),cos(phiInput)];
A = zeros(nInput,1);
%Lambda=nInput*R*Z*transpose(Z)*transpose(R); % realiser plus tard
phi(1)=rand;
Z(:,1) =[cos(phi(1)*2*pi),sin(phi(1)*2*pi)]';
D = zeros(mOutput, mOutput);
lambda= NaN(1,mOutput);
desMagnitude=1;
%xOutput = zeros(mOutput,1);
xOutput = [0,0]';
outputArray = zeros(mOutput,nTrials,T); %array to hold outputs generated by network on each time step for each T
targetArray = zeros(mOutput,T); %array to hold target for each T

rewardThreshold=2;
rewardThreshold1=2*nInput;
rewardThreshold2=4*nInput-4;
alpha1=1/4;
beta1=1/2;
alpha2=1/4;
beta2=1/2;
E = zeros(nTrials,1);
r1=zeros(nInput,1);

for k = 2:nInput
    phi(k)= rand;    % !!!!!Angle!!!this phi concerns about tge foce direction(FD)
    Y = [cos(phi(k)*2*pi);sin(phi(k)*2*pi)]';
    Z(:,k)=Y;
end


for j = 1:T
    desTheta = thetak(randomOrder(j));
    tTarget = desMagnitude*[cos(desTheta);sin(desTheta)] %t,target position
    targetArray(:,j) = tTarget;
    
    for i = 1:nTrials
        mu1=W1*tTarget+Wthres1; %first element of Y1
        expectR1=V1*tTarget+Vthres1;
        for p = 1:nInput
            expectr=expectR1(p);
            O1=[(1-expectr)/2 0];
            omega1(p)=max(O1);
            A1(p)=normrnd(mu1(p),omega1(p));
            y(p)=(2./(1+ exp(-A1(p))))-1;
            
            
            
        end
        %determination of X the output
        xOutput=Z*y;
        
        %RL forthe output
        e = (1/2)*(tTarget-xOutput)'*(tTarget-xOutput);
        
        
        if e<=1
            r= max(0,(rewardThreshold - e)/rewardThreshold);
        else
            r= max(0,(rewardThreshold1 - e)/rewardThreshold2);
        end
        r1 = r*ones(nInput,1);
        for p = 1:nInput
            for k = 1:mOutput
                deltaW1= (r1-expectR1).*((A1-mu1)./omega1);  %RL W
                W1(p,k)=W1(p,k)+alpha1*deltaW1(p)*tTarget(k);
                Wthres1(p)=Wthres1(p)+alpha1*deltaW1(p);
                
                deltaV1 = (r1-expectR1); %RL V
                V1(p,k)=V1(p,k)+beta1*deltaV1(p)*tTarget(k);
                
            end
            
        end
        
        outputArray(:,i,j) = xOutput;
        EG(i)=(1/2)*(tTarget-xOutput)'*(tTarget-xOutput);
        plot(EG)
    end
    % EG(i)=(1/2)*(tTarget-xOutput)'*(tTarget-xOutput);
    %Plot unit circle, target location, output location after every 100
    %trials, and preferred neuron directions
    figure;
    hold on
    plot(-1:0.01:1,-sqrt(1-[-1:0.01:1].^2),'k',-1:0.01:1,sqrt(1-[-1:0.01:1].^2),'k')
    h = zeros(1,3);
    h(1) = plot(targetArray(1,j),targetArray(2,j),'b*','MarkerSize',10);
    for n = 1:size(Z,2)
        plot([0 Z(1,n)],[0 Z(2,n)],'m.','MarkerSize',20);
        h(2) = plot([0 Z(1,n)],[0 Z(2,n)],'m-','LineWidth',2);
    end
    for n = 100:100:size(outputArray,2)
        if n == 100*(size(outputArray,2)/100)/2
            h(3) = plot(outputArray(1,n),outputArray(2,n),'.','MarkerSize',5,'Color',[1,(size(outputArray,2)-n)/size(outputArray,2),(size(outputArray,2)-n)/size(outputArray,2)]);
        else
            plot(outputArray(1,n),outputArray(2,n),'.','MarkerSize',5,'Color',[1,(size(outputArray,2)-n)/size(outputArray,2),(size(outputArray,2)-n)/size(outputArray,2)])
        end
    end
    xlim([-1 1])
    ylim([-1 1])
    title('Target, Preferred Neuron Direction, and Network Outputs During Learning')
    legend(h,'Target','Preferred Neuron Directions','Network Outputs (Darker Hues -> Later Trials')
end
